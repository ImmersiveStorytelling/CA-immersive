// <auto-generated />
using immersive_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace immersiveAPI.Migrations
{
    [DbContext(typeof(ImmersiveDbContext))]
    [Migration("20171102151833_addedUnits")]
    partial class addedUnits
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("immersive_API.Entities.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.HasKey("MeasurementId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("immersive_API.Entities.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeasurementId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("UnitId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("ParameterId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("UnitId");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("immersive_API.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("immersive_API.Entities.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UnitId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("immersive_API.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PassHash")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("immersive_API.Entities.UserProject", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("immersive_API.Entities.Measurement", b =>
                {
                    b.HasOne("immersive_API.Entities.Project", "Project")
                        .WithMany("Measurements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("immersive_API.Entities.Parameter", b =>
                {
                    b.HasOne("immersive_API.Entities.Measurement", "Measurement")
                        .WithMany("Parameters")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("immersive_API.Entities.Unit", "Unit")
                        .WithMany("Parameters")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("immersive_API.Entities.UserProject", b =>
                {
                    b.HasOne("immersive_API.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("immersive_API.Entities.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
